// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RequestManagementSystem.Persistence.Context;

#nullable disable

namespace RequestManagementSystem.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230524082928_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RequestId")
                        .HasColumnType("integer");

                    b.Property<int>("RequestStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Action");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5640),
                            Name = "3E - AGIS"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5648),
                            Name = "3E - dəstək"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5666),
                            Name = "3rd Party"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5671),
                            Name = "abc web site"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5674),
                            Name = "AGIS - Debitor"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5684),
                            Name = "AD SOCAR Romania"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5688),
                            Name = "Agis - Proqram təminatı"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5693),
                            Name = "ailem.socar.az"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5695),
                            Name = "ant.socar.az"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5699),
                            Name = "ASAN web service"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5701),
                            Name = "Azeriqaz sms"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5703),
                            Name = "azkob.az"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5705),
                            Name = "Call Center"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5706),
                            Name = "CIC web site"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5708),
                            Name = "CVS web site"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5710),
                            Name = "AD SOCAR Romania"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5711),
                            Name = "ailem.socar.az"
                        });
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileUploadPath")
                        .HasColumnType("text");

                    b.Property<int>("RequestId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.ContactMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContactMethod");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5979),
                            Name = "Email"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5989),
                            Name = "Phone"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5993),
                            Name = "SOLMAN"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(5997),
                            Name = "REQUEST"
                        });
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6111),
                            Name = "Information Technologies"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6122),
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6124),
                            Name = "Data Analysis"
                        });
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.DetailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DetailType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6204),
                            Name = "Application Maintenance"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6211),
                            Name = "Application Development"
                        });
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Priority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6274),
                            Level = "Low"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6288),
                            Level = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6290),
                            Level = "High"
                        });
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("ExecutionTime")
                        .HasColumnType("interval");

                    b.Property<int?>("ExecutorUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InitialExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RequestId")
                        .HasColumnType("integer");

                    b.Property<int>("RequestStatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("Report");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ExecutorUserId")
                        .HasColumnType("integer");

                    b.Property<string>("FileUploadPath")
                        .HasColumnType("text");

                    b.Property<int>("PriorityId")
                        .HasColumnType("integer");

                    b.Property<int>("RequestStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("ExecutorUserId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.RequestDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ContactMethodId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DetailTypeId")
                        .HasColumnType("integer");

                    b.Property<double>("ExecutionTime")
                        .HasColumnType("double precision");

                    b.Property<double>("PlannedExecutionTime")
                        .HasColumnType("double precision");

                    b.Property<int>("PriorityId")
                        .HasColumnType("integer");

                    b.Property<int>("RequestId")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RootCause")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Routine")
                        .HasColumnType("boolean");

                    b.Property<string>("SolmanRequestNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Solution")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContactMethodId");

                    b.HasIndex("DetailTypeId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("RequestDetail");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RequestStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6367),
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6380),
                            Name = "In Execution"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6382),
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6386),
                            Name = "Waiting"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6390),
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6400),
                            Name = "Close"
                        });
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RequestType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6505),
                            Name = "APP Change"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6513),
                            Name = "APP Issue"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6518),
                            Name = "APP New Requirement"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6524),
                            Name = "Change the Report"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6526),
                            Name = "Crate Custom Report"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6535),
                            Name = "Create New Rrport"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6540),
                            Name = "Incident"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6542),
                            Name = "Master Data Change"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6544),
                            Name = "Service Request"
                        });
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AllowNotification")
                        .HasColumnType("boolean");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("InternalNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowNotification = true,
                            ContactNumber = "+995 551234567",
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6648),
                            DepartmentId = 1,
                            InternalNumber = "123456",
                            Name = "Nigar",
                            Password = "nigar123",
                            Position = "meslehetci",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            AllowNotification = true,
                            ContactNumber = "+995 551234567",
                            CreatedAt = new DateTime(2023, 5, 24, 8, 29, 27, 663, DateTimeKind.Utc).AddTicks(6675),
                            DepartmentId = 2,
                            InternalNumber = "123456",
                            Name = "Ferec",
                            Password = "ferec123",
                            Position = "meslehetci",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.UserCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCreatable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExecutable")
                        .HasColumnType("boolean");

                    b.HasKey("CategoryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCategory");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.Action", b =>
                {
                    b.HasOne("RequestManagementSystem.Domain.Entities.Request", "Request")
                        .WithMany("Actions")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RequestManagementSystem.Domain.Entities.RequestStatus", "RequestStatus")
                        .WithMany("Actions")
                        .HasForeignKey("RequestStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RequestManagementSystem.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Request");

                    b.Navigation("RequestStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.Comment", b =>
                {
                    b.HasOne("RequestManagementSystem.Domain.Entities.Request", "Request")
                        .WithMany("Comments")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RequestManagementSystem.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("RequestManagementSystem.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.Report", b =>
                {
                    b.HasOne("RequestManagementSystem.Domain.Entities.Request", "Request")
                        .WithOne("Report")
                        .HasForeignKey("RequestManagementSystem.Domain.Entities.Report", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.Request", b =>
                {
                    b.HasOne("RequestManagementSystem.Domain.Entities.Category", "Category")
                        .WithMany("Requests")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RequestManagementSystem.Domain.Entities.User", "CreateUser")
                        .WithMany("CreatedRequests")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RequestManagementSystem.Domain.Entities.User", "ExecutorUser")
                        .WithMany("ExecutedRequests")
                        .HasForeignKey("ExecutorUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RequestManagementSystem.Domain.Entities.Priority", "Priority")
                        .WithMany("Requests")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RequestManagementSystem.Domain.Entities.RequestStatus", "RequestStatus")
                        .WithMany("Requests")
                        .HasForeignKey("RequestStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RequestManagementSystem.Domain.Entities.RequestType", "RequestType")
                        .WithMany("Requests")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreateUser");

                    b.Navigation("ExecutorUser");

                    b.Navigation("Priority");

                    b.Navigation("RequestStatus");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.RequestDetail", b =>
                {
                    b.HasOne("RequestManagementSystem.Domain.Entities.ContactMethod", "ContactMethod")
                        .WithMany("RequestDetails")
                        .HasForeignKey("ContactMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RequestManagementSystem.Domain.Entities.DetailType", "DetailType")
                        .WithMany("RequestDetails")
                        .HasForeignKey("DetailTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RequestManagementSystem.Domain.Entities.Request", "Request")
                        .WithOne("RequestDetail")
                        .HasForeignKey("RequestManagementSystem.Domain.Entities.RequestDetail", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactMethod");

                    b.Navigation("DetailType");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.User", b =>
                {
                    b.HasOne("RequestManagementSystem.Domain.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.UserCategory", b =>
                {
                    b.HasOne("RequestManagementSystem.Domain.Entities.Category", "Category")
                        .WithMany("UserCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RequestManagementSystem.Domain.Entities.User", "User")
                        .WithMany("UserCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.Category", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("UserCategories");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.ContactMethod", b =>
                {
                    b.Navigation("RequestDetails");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.DetailType", b =>
                {
                    b.Navigation("RequestDetails");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.Priority", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.Request", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Comments");

                    b.Navigation("Report")
                        .IsRequired();

                    b.Navigation("RequestDetail");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.RequestStatus", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.RequestType", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("RequestManagementSystem.Domain.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CreatedRequests");

                    b.Navigation("ExecutedRequests");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
